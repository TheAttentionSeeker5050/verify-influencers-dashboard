// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("POSTGRES_DATABASE_URL")
}

// The `Category` model has: id (integer), name, createdAt, updatedAt
model Category {
  id         Int          @id @default(autoincrement())
  name       String
  createdAt  DateTime     @default(now())
  updatedAt  DateTime     @updatedAt
  Influencer Influencer[]
  Claim      Claim[]
}

// The `Influencer` model has: id(int), rank (int), name, category, trustScore (float), trendDirection (string), followersCount (int), verifiedClaimsCount (int), yearlyRevenue, recommendedProducts, createdAt, updatedAt
model Influencer {
  id                  Int      @id @default(autoincrement())
  rank                Int?
  name                String
  twitterHandle       String
  category            Category? @relation(fields: [categoryId], references: [id])
  categoryId          Int?
  trustScore          Float?  
  trendDirection      String?
  followersCount      Int?    
  verifiedClaimsCount Int?     
  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt
  Claim               Claim[]
  yearlyRevenue       Float?
  recommendedProducts String?
}

// The `Claim` model has: id (int), influencer, claim (string), tweetId (string), verificationStatus [verified, questionable, debunked], category, createdAt, updatedAt
model Claim {
  id                 Int        @id @default(autoincrement())
  influencer         Influencer @relation(fields: [influencerId], references: [id])
  influencerId       Int
  claim              String
  tweetId            String
  verificationStatus String
  category           Category   @relation(fields: [categoryId], references: [id])
  categoryId         Int
  createdAt          DateTime   @default(now())
  updatedAt          DateTime   @updatedAt
}


